- name: Social web cloud configuration
  hosts: "{{ webserver | default('localhost')}}"
  become: true
  remote_user: "{{ user | default('ubuntu') }}"
  vars: 
    ansible_ssh_private_key_file: "{{ ssh_key | default('null')}}"
    home: "/home/socialweb"
    keyfile: "/home/socialweb/privkey.pem"
    chainfile: "/home/socialweb/fullchain.pem"
  vars_prompt:
  # Code for if we want to run this on remote servers in the future
#    - name: user
#      prompt: "Please type the admin username that can make changes to the webserver. Clicking enter will default to 'ubuntu' "
#      private: false
#    - name: webserver
#      prompt: "Please enter the IP address of the webserver "
#      private: false
#    - name: ssh_key
#      prompt: "If you are using a remote server, please enter the location of the ssh key for the user listed in the previous prompt "
#      private: false

    - name: domain_name
      prompt: "Please enter the domain name you have registered. i.e. google.com "
      private: false

  tasks:
    - name: Create socialweb group 
      group:
        name: socialweb

    - name: Create socialweb admin user
      user:
        name: socialweb
        comment: Social Web Admin User
        append: true
        groups: sudo, socialweb
        shell: /bin/bash
        state: present
    
    - name: permit traffic in default zone for https service
      shell: "ufw allow {{ item }}"
      loop:
        - "ssh"
        - "http"
        - "https"
      register: ufw
      changed_when: '"Skipping" not in ufw.stdout'

    - name: permit traffic in default zone for https service
      service:
        name: ufw
        state: started
        enabled: true  

    - name: install required packages
      package:
        name: "{{ item }}"
        state: present
      loop:
        - python3-pip 
        - python3-dev 
        - build-essential 
        - libssl-dev 
        - libffi-dev 
        - python3-setuptools 
        - unzip    
        - python3-venv
        - sqlcipher
        - libsqlcipher0
        - libsqlcipher-dev
    
    - name: Generate database key
      shell: "head -c 32 /dev/urandom | xxd -p -c 64"
      register: db_key_output

    - name: pull socialweb zip and place it in socialweb homedir
      get_url:
        url: "https://socialweb.cloud/swc.zip"
        dest: "{{ home }}"
        owner: socialweb
      become: yes
      become_user: socialweb

    - name: unzip file
      unarchive:
        src: "{{ home }}/swc.zip"
        dest: "{{ home }}"
        owner: socialweb
      become: yes
      become_user: socialweb

    - name: Create database key file
      copy:
        content: "{{ db_key_output.stdout }}"
        dest: "{{ home }}/mysite/.db_key"
        owner: socialweb
        group: socialweb
        mode: '0600'

    - name: populate config template
      template:
        src: "{{ home }}/mysite/config.py.j2"
        dest: "{{ home }}/mysite/config.py"
      become: yes
      become_user: socialweb

    - name: create virtual env for code
      shell: "python3 -m venv {{ home }}/socialwebenv"
      become: yes
      become_user: socialweb

    - name: source activate socialwebenv
      shell: "{{ home }}/socialwebenv/bin/pip install -r {{ home }}/mysite/requirements.txt"
      become: yes
      become_user: socialweb
      environment:
        PATH: "{{ home }}/socialwebenv/bin:{{ ansible_env.PATH }}"
      register: install_output

    - name: install requirements
      shell: "pip install -r {{ home }}/mysite/requirements.txt"
      become: yes
      become_user: socialweb
      environment:
        PATH: "{{ ansible_env.PATH }}"
      register: install_output
    
    - name: remove current service file if present
      file: 
        path: /etc/systemd/system/socialweb.service
        state: absent

    - name: create service file
      file: 
        path: /etc/systemd/system/socialweb.service
        state: touch

    - name: configure service file
      lineinfile:
        path: /etc/systemd/system/socialweb.service
        line: "{{ item }}"
      loop:
      - "[Service]"
      - "User=socialweb"
      - "Group=socialweb"
      - "WorkingDirectory=/home/socialweb/mysite"
      - "Environment=\"PATH=/home/socialweb/socialwebenv/bin\""
      - "ExecStart=/usr/bin/authbind --deep /home/socialweb/socialwebenv/bin/gunicorn --reload --worker-class eventlet -w 1 --certfile={{ chainfile }} --keyfile={{ keyfile }} --bind {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:443 --log-file=/home/socialweb/applog.txt app:app"
      - ""
      - "[Install]"
      - "WantedBy=multi-user.target"

    - name: daemon-reload
      ansible.builtin.command: systemctl daemon-reload
      become: yes
    
    - name: install certbot and authbind
      package:
        name: "{{ item }}"
      loop:
      - certbot
      - authbind
    
    - name: setup certs
      shell: "certbot certonly --standalone -n --agree-tos --email postmaster@{{domain_name}} --domains {{domain_name}}"
      ignore_errors: true

    - name: Find symlinked .pem files
      find:
        paths: "/etc/letsencrypt/live/{{domain_name}}"
        patterns: '*.pem'
        follow: false
        file_type: link
      register: pem_symlinks

    - name: Copy actual files while preserving symlink names
      command: >
        sh -c 'cp --dereference "{{ item.path }}" "/home/socialweb/{{ item.path | basename }}"'
      with_items: "{{ pem_symlinks.files }}"
      register: copy_results

    - name: Set ownership and permissions
      file:
        path: /home/socialweb/{{ item.path | basename }}
        owner: socialweb
        group: socialweb
        mode: '0644'
      with_items: "{{ pem_symlinks.files }}"

    - name: setup authbind files
      file:
        path: "{{ item }}"
        mode: "0777"
        state: touch
      loop:
      - /etc/authbind/byport/80
      - /etc/authbind/byport/443

    - name: start service
      service:
        name: socialweb
        state: restarted
        enabled: true

    - name: Debug installation output
      debug:
        var: install_output.stdout_lines
